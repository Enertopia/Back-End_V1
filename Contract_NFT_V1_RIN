// SPDX-License-Identifier: MIT
pragma solidity ^0.9.0;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

contract RINPlatform is Initializable, ERC721, AccessControl, ReentrancyGuardUpgradeable {
    // State variables
    mapping(uint256 => RINData) private rinData;

    // Struct for RIN data
    struct RINData {
        string rinAssignmentCode;
        uint256 yearBatch;
        uint256 companyRegistrationId;
        uint256 facilityRegistrationId;
        uint256 batchNumber;
        uint256 equivalenceValue;
        string biofuelTypeCode;
        uint256 rinBlockStartNumber;
        uint256 rinBlockEndNumber;
    }

    // Role definitions
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant USER_ROLE = keccak256("USER_ROLE");

    // Events
    event RINRegistered(uint256 indexed tokenId, RINData rinData);

    function initialize(string memory name, string memory symbol) public initializer {
        ERC721(name, symbol);
        _setupRole(ADMIN_ROLE, msg.sender);
        _setRoleAdmin(USER_ROLE, ADMIN_ROLE);
        __ReentrancyGuard_init();
    }

    modifier onlyUser() {
        if (!hasRole(USER_ROLE, msg.sender)) revert("Unauthorized: Caller is not a registered user");
        _;
    }

    function registerRIN(
        string memory rinAssignmentCode,
        uint256 yearBatch,
        uint256 companyRegistrationId,
        uint256 facilityRegistrationId,
        uint256 batchNumber,
        uint256 equivalenceValue,
        string memory biofuelTypeCode,
        uint256 rinBlockStartNumber,
        uint256 rinBlockEndNumber
    ) external onlyUser nonReentrant returns (uint256) {
        uint256 newTokenId = uint256(keccak256(abi.encodePacked(
            rinAssignmentCode, 
            yearBatch, 
            companyRegistrationId, 
            facilityRegistrationId, 
            batchNumber, 
            equivalenceValue, 
            biofuelTypeCode, 
            rinBlockStartNumber, 
            rinBlockEndNumber, 
            msg.sender
        )));
        RINData memory newRIN = RINData(
            rinAssignmentCode,
            yearBatch,
            companyRegistrationId,
            facilityRegistrationId,
            batchNumber,
            equivalenceValue,
            biofuelTypeCode,
            rinBlockStartNumber,
            rinBlockEndNumber
        );
        
        rinData[newTokenId] = newRIN;
        _mint(msg.sender, newTokenId);
        
        emit RINRegistered(newTokenId, newRIN);
        return newTokenId;
    }

    // Other functions (like transferRIN, getRINData) remain the same
}
