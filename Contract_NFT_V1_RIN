// SPDX-License-Identifier: MIT
pragma solidity ^0.9.0;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

contract RINPlatform is Initializable, ERC721, AccessControl, ReentrancyGuardUpgradeable {
    // State variables
    mapping(uint256 => RINData) private rinData;

    // Struct for RIN data
    struct RINData {
        string rinNumber; // User uploaded RIN number
        string documentHash; // Hash of the document stored in Storj
    }

    // Role definitions
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant USER_ROLE = keccak256("USER_ROLE");

    // Events
    event RINRegistered(uint256 indexed tokenId, RINData rinData);
    event RINTransferred(uint256 indexed tokenId, address to);

    function initialize(string memory name, string memory symbol) public initializer {
        ERC721(name, symbol);
        _setupRole(ADMIN_ROLE, msg.sender);
        _setRoleAdmin(USER_ROLE, ADMIN_ROLE);
        __ReentrancyGuard_init();
    }

    modifier onlyUser() {
        if (!hasRole(USER_ROLE, msg.sender)) revert("Unauthorized: Caller is not a registered user");
        _;
    }

    function registerRIN(
        string memory rinNumber,
        string memory documentHash
    ) external onlyUser nonReentrant returns (uint256) {
        uint256 newTokenId = uint256(keccak256(abi.encodePacked(rinNumber, documentHash, msg.sender)));
        RINData memory newRIN = RINData(rinNumber, documentHash);
        
        rinData[newTokenId] = newRIN;
        _mint(msg.sender, newTokenId);
        
        emit RINRegistered(newTokenId, newRIN);
        return newTokenId;
    }

    function transferRIN(uint256 tokenId, address to) external nonReentrant {
        require(ownerOf(tokenId) == msg.sender || hasRole(ADMIN_ROLE, msg.sender), "Unauthorized: Caller cannot transfer this RIN");
        _transfer(msg.sender, to, tokenId);
        emit RINTransferred(tokenId, to);
    }

    function getRINData(uint256 tokenId) external view returns (RINData memory) {
        require(_exists(tokenId), "Query for nonexistent RIN");
        return rinData[tokenId];
    }
}
